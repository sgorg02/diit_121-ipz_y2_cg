// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

// ---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner) : TForm(Owner) {
}

// ---------------------------------------------------------------------------
void __fastcall TForm1::FormResize(TObject *Sender) {
	GLfloat nRange = 300.0; // размер области в мировых координатах
	// область вывода для окна в физических координатах
	glViewport(0, 0, Panel1->Width, Panel1->Height);
	// настройка матрицы проецирования
	glMatrixMode(GL_PROJECTION);
	// сброс матрицы
	glLoadIdentity();
	// установка ортогональной проекции по размерам окна
	if (Panel1->Width <= Panel1->Height)
		glOrtho(-nRange, nRange, -nRange*Panel1->Height / Panel1->Width,
		nRange*Panel1->Height / Panel1->Width, -nRange * 2, nRange * 2);
	else
		glOrtho(-nRange*Panel1->Width / Panel1->Height,
		nRange*Panel1->Width / Panel1->Height, -nRange, nRange, -2 * nRange,
		nRange * 2);
}

// ---------------------------------------------------------------------------
void __fastcall TForm1::FormCreate(TObject *Sender) {
	// отключение ошибок с вещественными числами
	_control87(MCW_EM, MCW_EM);
	// получение контекста окна компонента Panel1
	HDC hdc = GetDC(Panel1->Handle);
	// установка формата пикселей
	PIXELFORMATDESCRIPTOR pfd = {
		sizeof(PIXELFORMATDESCRIPTOR), 1,
		PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER,
		PFD_TYPE_RGBA, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0,
		PFD_MAIN_PLANE, 0, 0, 0, 0};
	int PixelFormat = ChoosePixelFormat(hdc, &pfd);
	SetPixelFormat(hdc, PixelFormat, &pfd);
	// создание контектса отображения на компоненте Panel1
	HGLRC hrc = wglCreateContext(hdc);
	wglMakeCurrent(hdc, hrc);

}

// ---------------------------------------------------------------------------
void TForm1::PaintIt() {
	// настройка используемых возможностей OpenGL
	glEnable(GL_COLOR_MATERIAL); // установка вывода материала объектов
	glEnable(GL_DEPTH_TEST); // включить расчеты буфера глубины
	glEnable(GL_LIGHTING); // использовать освещение
	glEnable(GL_LIGHT1); // включить источник света 1
	glShadeModel(GL_SMOOTH); // разрешить плавное цветовое сглаживание
	// инициализация матрицы модели
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	// Настройка источника света
	GLfloat light1_diffuse[] = {4, 7, 2};
	GLfloat light1_position[] = {100.0, 100.0, 100.0, 1.0};
	glLightfv(GL_LIGHT1, GL_DIFFUSE, light1_diffuse);
	glLightfv(GL_LIGHT1, GL_POSITION, light1_position);
	// Установка параметров преобразования объектов
	// поворот объектов на угол заданный в Edit1, вокруг вектора (1,1,1)
	glRotatef(Edit1->Text.ToDouble(), CheckBox1->Checked, CheckBox2->Checked, CheckBox3->Checked);
	// установка масштаба по значению в Edit2 по всем осям
	glScalef(Edit2->Text.ToDouble(), Edit2->Text.ToDouble(),
		Edit2->Text.ToDouble());
	// перемещение по оси Х
	glTranslatef(-100, 0, 0);
	// Создание объектов изображения
	// очитска белым цветом
	glClearColor(1, 1, 1, 1);
	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);
	GLUquadricObj *quadObj = gluNewQuadric();
	// создание сферы красного цвета
	// glColor3f(1, 0, 0);
	// gluSphere(quadObj, 50, 50, 10);
	// перемещение начала координат
	glTranslatef(-100, 0, 0);
	// создание конуса
	glColor3f(0, 1, 0);
	gluCylinder(quadObj, 50, 50, 100, 100, 100);
	glTranslatef(200, 0, 0);

	gluCylinder(quadObj, 50, 50, 100, 100, 100);
	glTranslatef(200, 0, 0);

	gluCylinder(quadObj, 50, 50, 100, 100, 100);
	glTranslatef(200, 0, 0);

	gluCylinder(quadObj, 50, 50, 100, 100, 100);
	glTranslatef(-700, -50, -100);

	// создание параллелепипеда по граням
	glBegin(GL_QUADS);
	glColor3f(1, 0, 0);
	// по четыре вершины на грань
	glVertex3f(0, 0, 0);
	glVertex3f(0, 100, 0);
	glVertex3f(800, 100, 0);
	glVertex3f(800, 0, 0);
	glColor3f(1, 0, 0);
	glVertex3f(800, 0, 100);
	glVertex3f(800, 100, 100);
	glVertex3f(0, 100, 100);
	glVertex3f(0, 0, 100);
	glColor3f(1, 0, 1);
	glVertex3f(0, 0, 0);
	glVertex3f(0, 0, 100);
	glVertex3f(0, 100, 100);
	glVertex3f(0, 100, 0);
	glVertex3f(800, 0, 0);
	glVertex3f(800, 0, 100);
	glVertex3f(800, 100, 100);
	glVertex3f(800, 100, 0);
	glColor3f(1, 0, 0);
	glVertex3f(0, 0, 0);
	glVertex3f(0, 0, 50);
	glVertex3f(800, 0, 100);
	glVertex3f(800, 0, 0);
	glVertex3f(0, 100, 0);
	glVertex3f(0, 100, 100);
	glVertex3f(800, 100, 100);
	glVertex3f(800, 100, 0);
	glEnd();
	// -------------------
	glTranslatef(0, 0, 200);
	glBegin(GL_QUADS);
	glColor3f(0, 0, 1);

	glVertex3f(0, 0, 0);
	glVertex3f(800, 0, 0);
	glVertex3f(800, 100, 0);
	glVertex3f(0, 100, 0);

	glColor3f(0, 0, 1);
	glVertex3f(0, 0, 0);
	glVertex3f(400, 0, 100);
	glVertex3f(400, 100, 100);
	glVertex3f(0, 100, 0);

	glColor3f(0, 0, 1);
	glVertex3f(800, 0, 0);
	glVertex3f(800, 100, 0);
	glVertex3f(400, 100, 100);
	glVertex3f(400, 0, 100);

	glEnd();
	// ---------------------
	glBegin(GL_TRIANGLES);
	glColor3f(0, 0, 1);
	glVertex3f(0, 0, 0);
	glVertex3f(400, 0, 100);
	glVertex3f(800, 0, 0);

	glColor3f(0, 0, 1);
	glVertex3f(0, 100, 0);
	glVertex3f(800, 100, 0);
	glVertex3f(400, 100, 100);
	glEnd();
	// смена буфера с изображением
	SwapBuffers(GetDC(Panel1->Handle));
}

void __fastcall TForm1::Button1Click(TObject *Sender) {
	PaintIt();
}

// ---------------------------------------------------------------------------
void __fastcall TForm1::Edit1Change(TObject *Sender) {
	PaintIt();
}
// ---------------------------------------------------------------------------
